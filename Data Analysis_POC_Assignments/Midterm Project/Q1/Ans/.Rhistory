#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE+AVG_PERCENT_REPAY,data=train_, size=10,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
summary(fitnn)
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28]/x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_PERCENT_REPAY','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_PERCENT_REPAY)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.75*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE,data=train_, size=10,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28]/x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_PERCENT_REPAY','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_PERCENT_REPAY)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.75*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE,data=train_, size=15,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
plotnet(fitnn,circle_col = "lightblue", circle_cex = 3,pos_col = "darkgreen", neg_col = "red")
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28]/x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_PERCENT_REPAY','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_PERCENT_REPAY)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.75*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE,data=train_, size=15,hess = T, dk=15e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
plotnet(fitnn,circle_col = "lightblue", circle_cex = 3,pos_col = "darkgreen", neg_col = "red")
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28]/x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_PERCENT_REPAY','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_PERCENT_REPAY)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.90*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE,data=train_, size=15,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
plotnet(fitnn,circle_col = "lightblue", circle_cex = 3,pos_col = "darkgreen", neg_col = "red")
#Plot for fitted vs residual
df_nnet <- data.frame(residuals = fitnn$residuals, fitted = fitnn$fitted.values)
ggplot(data=df_nnet, aes(x=fitted, y=residuals)) + geom_point()
library(ROCR)
pred = predict(fitnn, newdata=test_, type="raw") #use raw type to get probablities for ad/nonad
prediction <- prediction(pred,test_$Y)
performance <- performance(prediction, measure = "tpr", x.measure = "fpr")
plot(performance, main="ROC curve",xlab="1-Specificity", ylab="Specificity",col=bluered(10))
# ROC area under the curve
pred = predict(fitnn, newdata=test_, type="raw")
prediction <- prediction(pred,test_$Y)
auc.tmp <- performance(prediction,"auc")
auc <- as.numeric(auc.tmp@y.values)
print(auc)
#Precision Recall graph
pred = predict(fitnn, newdata=test_, type="raw")
prediction <- prediction(pred,test_$Y)
performance <- performance(prediction,"prec","rec")
plot(performance, avg= "threshold", colorize=T, lwd= 3,
main= "... Precision/Recall graphs ...")
#Lift curve
pred = predict(fitnn, newdata=test_, type="raw")
test_$probs=pred
test_$prob=sort(test_$probs,decreasing = T)
lift <- lift(Y ~ prob, data = test_)
xyplot(lift,plot = "gain")
#histogram of residuals and fitted values
par(mfrow=c(1, 2))
hist(fitnn$residuals,xlab = "Residual",main = paste("Histogram of Resdiuals"))
hist(fitnn$fitted.values,xlab = "Fitted Values",main = paste("Histogram of Fitted Values"))
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28],x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_BILL_REPAY','AVG_AMT_PAID','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_AMT_PAID)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.90*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE+AVG_AMT_PAID+AVG_BILL_REPAY,data=train_, size=15,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28],x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_BILL_REPAY','AVG_AMT_PAID','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_AMT_PAID)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.90*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE+AVG_AMT_PAID+AVG_BILL_REPAY,data=train_, size=10,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
# ROC area under the curve
pred = predict(fitnn, newdata=test_, type="raw")
prediction <- prediction(pred,test_$Y)
auc.tmp <- performance(prediction,"auc")
auc <- as.numeric(auc.tmp@y.values)
print(auc)
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28],x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_BILL_REPAY','AVG_AMT_PAID','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_AMT_PAID)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.90*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE+AVG_AMT_PAID+AVG_BILL_REPAY,data=train_, size=10,hess = T, dk=15e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
# ROC area under the curve
pred = predict(fitnn, newdata=test_, type="raw")
prediction <- prediction(pred,test_$Y)
auc.tmp <- performance(prediction,"auc")
auc <- as.numeric(auc.tmp@y.values)
print(auc)
x<-read.csv('C:/Users/ilanigam17/Desktop/ila1.csv', skip=2,header = FALSE)
head(x)
x$V7[x$V7<0]<-0
x$V8[x$V8<0]<-0
x$V9[x$V9<0]<-0
x$V10[x$V10<0]<-0
x$V11[x$V11<0]<-0
x$V12[x$V12<0]<-0
x<-data.frame(x,rowMeans(x[,7:12],na.rm = TRUE),rowMeans(x[,13:18],na.rm = TRUE),rowMeans(x[,19:24],na.rm = TRUE))
head(x)
head(x)
x<-data.frame(x[,2:6],x[,26], x[,28],x[,27],x[,25])
head(x)
names(x)<-c('LIMIT_BAL','SEX','EDUCATION','MARRIAGE','AGE','AVG_REPAY_OVERDUE','AVG_BILL_REPAY','AVG_AMT_PAID','Y')
head(x)
hist(x$AVG_REPAY_OVERDUE)
hist(x$AVG_AMT_PAID)
# smp_size <- floor(0.75 * nrow(x))
# set.seed(123)
# train_ind <- sample(seq_len(nrow(x)), size = smp_size)
#
# train <- x[train_ind, ]
# test <- x[-train_ind, ]
names(test)
#Neural Network
library(nnet)
#install.packages("NeuralNetTools")
library(NeuralNetTools)
maxs <- apply(x, 2, max)
mins <- apply(x, 2, min)
scaled <- as.data.frame(scale(x, center = mins, scale = maxs - mins))
index <- sample(1:nrow(x),round(0.90*nrow(x)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
test_$Y <- as.factor(test_$Y)
train_$Y <- as.factor(train_$Y)
# library(neuralnet)
# n <- names(train_)
# f <- as.formula(paste("Y ~", paste(n[!n %in% "Y"], collapse = " + ")))
# nn <- neuralnet(f,data=train_,hidden=c(4,3))
#Build the model
fitnn <- nnet(Y~LIMIT_BAL+SEX+MARRIAGE+AGE+AVG_REPAY_OVERDUE+AVG_AMT_PAID+AVG_BILL_REPAY,data=train_, size=15,hess = T, dk=5e-4, maxit = 200)
summary(fitnn)
#Predict for test data
pred = predict(fitnn, newdata=test_, type="class")
str(test_)
#Confusion Matrix
library(caret)
library(e1071)
confusionMatrix(pred,test_$Y)
# ROC area under the curve
pred = predict(fitnn, newdata=test_, type="raw")
prediction <- prediction(pred,test_$Y)
auc.tmp <- performance(prediction,"auc")
auc <- as.numeric(auc.tmp@y.values)
print(auc)
fitnn
library(tree)
tree.train = tree(Y~.,data=train_)
summary(tree.train)
install.packages("tree")
library(tree)
tree.train = tree(Y~.,data=train_)
summary(tree.train)
#Display the tree structure and node labels
plot(tree.train)
text(tree.train, pretty =0) #Pretty=0 includes the category names
#FancyRPlot
install.packages("rpart")
install.packages("rattle")
library(rpart)
library(rattle)
tree <- rpart(Y~.,data=train_,method="class")
fancyRpartPlot(tree)
library(tree)
tree.train = tree(Y~.,data=train_)
summary(tree.train)
#Display the tree structure and node labels
plot(tree.train)
text(tree.train, pretty =0) #Pretty=0 includes the category names
library(rpart)
library(rattle)
tree <- rpart(Y~.,data=train_,method="class")
fancyRpartPlot(tree)
library(rpart)
library(rattle)
@phiver rpart.plot
library(rpart)
library(rattle)
library(rpart.plot)
tree <- rpart(Y~.,data=train_,method="class")
install.packages("rattle")
install.packages("rattle")
tree <- rpart(Y~.,data=train_,method="class")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
